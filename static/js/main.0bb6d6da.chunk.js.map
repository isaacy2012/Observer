{"version":3,"sources":["model/Item.ts","model/Room.ts","model/Server.ts","ui/Header.tsx","ui/AddButton.tsx","ui/LikeModule.tsx","ui/Tile.tsx","ui/FlexGrid.tsx","ui/InputModal.tsx","img/logo.svg","ui/Logo.tsx","ui/RoomScreen.tsx","ui/NewRoom.tsx","ui/PinScreen.tsx","ui/LoginScreen.tsx","ui/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Item","roomId","text","id","likes","this","uuid","push","filter","val","index","arr","length","includes","Room","name","pin","creator","ip","a","items","Map","fetch","method","headers","body","JSON","stringify","response","json","then","data","i","_id","room","set","DBUpdateItem","itemToAdd","catch","Promise","reject","Header","props","className","logo","roomPin","title","originalPosterName","AddButton","onClick","LikeModule","isLiked","onLike","onUnlike","icon","faHeart","faHeartBroken","hslToHex","h","s","l","Math","min","f","n","k","color","max","round","toString","padStart","getHexColorFromLikes","hue","maxLikes","thisLikes","calcMaxLikes","styles","StyleSheet","create","card","backgroundColor","textAlign","borderRadius","marginTop","marginRight","marginLeft","padding","border","Tile","item","useState","shouldUpdate","setShouldUpdate","React","useContext","UUIDContext","Card","css","getNLikes","Body","hasAlreadyLiked","alert","breakpointColumns","default","1000","700","FlexGrid","breakpointCols","columnClassName","messages","map","InputModal","show","onClickPositive","handleClose","textAreaAutoSize","useRef","shouldDisableAcceptButton","current","value","trim","useEffect","focus","Modal","onHide","dialogClassName","type","aria-label","disabled","aria-hidden","ref","placeholder","maxLength","autoFocus","history","useHistory","params","URLSearchParams","search","window","location","reload","src","alt","RoomScreen","setItems","showModal","setShowModal","setMaxLikes","fileDownloadUrl","setFileDownloadUrl","dofileDownload","fetchFromDB","DBGetAll","retItems","values","Array","from","x","reduce","b","interval","setInterval","clearInterval","click","URL","revokeObjectURL","Button","output","blob","Blob","createObjectURL","variant","download","href","reverse","get","like","console","log","_","unlike","DBAddItem","newItem","newItems","NewRoom","roomNameInput","creatorNameInput","onCancel","onSelect","PinScreen","pinInput","shake","setShake","shakeButton","setTimeout","tryGoToRoom","num","parseInt","isNaN","onKeyDown","e","key","onNewRoom","LoginScreen","first","second","scrollIntoView","behavior","DBAddRoom","newRoom","createContext","makeOrGetUUID","str_uuid","uuid_null","Cookies","undefined","new_uuid","uuidv4","AppRouter","App","loggedIn","setLoggedIn","setRoom","useCallback","fail","DBGetRoom","append","String","queryString","useLocation","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0bb6d6da.chunk.js","sourcesContent":["export class Item {\r\n    roomId: string;\r\n    id: string;\r\n    likes: string[];\r\n    text: string;\r\n\r\n    constructor(roomId: string, text: string, id: string, likes: string[] = []) {\r\n        this.roomId = roomId;\r\n        this.id = id;\r\n        this.text = text;\r\n        this.likes = likes;\r\n    }\r\n\r\n\r\n    /**\r\n     * Like this item\r\n     * @param uuid the uuid of the liker\r\n     */\r\n    like(uuid: string) {\r\n        this.likes.push(uuid);\r\n    }\r\n\r\n    /**\r\n     * Unlike this item\r\n     * @param uuid the uuid of the unliker\r\n     */\r\n    unlike(uuid: string) {\r\n        this.likes = this.likes.filter(function(val, index, arr) {\r\n            return val !== uuid;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the number of likes this item has\r\n     */\r\n    getNLikes() {\r\n        return this.likes.length;\r\n    }\r\n\r\n    /**\r\n     * Check if this person has already liked this item\r\n     * @param uuid\r\n     */\r\n    hasAlreadyLiked(uuid: string): boolean {\r\n        return this.likes.includes(uuid);\r\n    }\r\n\r\n    toString(): String {\r\n        return this.text;\r\n    }\r\n\r\n}\r\n","export class Room {\r\n    name: string;\r\n    pin: number;\r\n    creator: string;\r\n    id: string;\r\n\r\n    constructor(name: string, pin: number, creator: string, id: string) {\r\n        this.name = name;\r\n        this.pin = pin;\r\n        this.creator = creator;\r\n        this.id = id;\r\n    }\r\n}\r\n","import {Item} from \"./Item\";\r\nimport {Room} from \"./Room\";\r\nconst ip: string = \"room.powellnz.com\";\r\n\r\n/**\r\n * Fetch all items from database by get requesting the server\r\n * @param roomId the id of the room to get all items from\r\n * @return items the items from the room\r\n */\r\nexport async function DBGetAll(roomId: string): Promise<Map<string, Item>> {\r\n    const items: Map<string, Item> = new Map();\r\n    const response = await fetch(`https://${ip}:9000/get-items`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ id: roomId })\r\n    });\r\n    await response.json().then(data => {\r\n        for (let i = 0; i < data.length; i++) {\r\n            const { text, _id, likes, room } = data[i];\r\n            items.set(_id, new Item(room, text, _id, likes))\r\n        }\r\n    });\r\n    return items;\r\n}\r\n\r\n/**\r\n * Add an item to the database\r\n * @param roomId the id of the room in which the item is from\r\n * @param text the text of the item\r\n * @return item the newly created Item object\r\n */\r\nexport async function DBAddItem(roomId: string, text: string): Promise<Item> {\r\n    const response = await fetch(`https://${ip}:9000/add-item`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ roomId, text })\r\n    });\r\n    let id = \"\";\r\n    await response.json().then(response => id = response._id);\r\n    return new Item(roomId, text, id);\r\n}\r\n\r\n/**\r\n * Update an item in the database\r\n * @param itemToAdd the item being updated\r\n * @return itemToAdd the item provided\r\n */\r\nexport async function DBUpdateItem(itemToAdd: Item): Promise<Item> {\r\n    await fetch(`https://${ip}:9000/update-item`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(itemToAdd)\r\n    });\r\n    return itemToAdd;\r\n}\r\n\r\n/**\r\n * add a room to the database\r\n * @param name the name of the room\r\n * @param creator the room's creator\r\n * @return room the newly created room object\r\n */\r\nexport async function DBAddRoom(name: string, creator: string): Promise<Room> {\r\n    const response = await fetch(`https://${ip}:9000/add-room`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ name, creator })\r\n    });\r\n    return response.json()\r\n        .then(data => {\r\n            const { name, pin, creator, _id } = data;\r\n            return new Room(name, pin, creator, _id);\r\n        });\r\n\r\n}\r\n\r\n/**\r\n * Gets a room from the database\r\n * @param pin the pin number of the room to get\r\n * @return the new room object if the room exists in the datbaase otherwise Promise.reject\r\n */\r\nexport async function DBGetRoom(pin: number): Promise<Room> {\r\n    const response = await fetch(`https://${ip}:9000/get-room`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ pin: pin })\r\n    });\r\n    return response.json()\r\n        .then(data => {\r\n            const { name, pin, creator, _id } = data;\r\n            return new Room(name, pin, creator, _id);\r\n        }).catch(() => {\r\n            return Promise.reject();\r\n        });\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport \"../css/App.css\"\r\nimport \"../css/Header.css\"\r\n\r\nexport function Header(props: { logo: JSX.Element, roomPin: number, title: String, originalPosterName: String }) {\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"row\">\r\n                <div className=\"column leftColumn\">\r\n                    {props.logo}\r\n                    <h3 className=\"pin-text\">{\"PIN: \" + props.roomPin}</h3>\r\n                </div>\r\n                <div className=\"column middleColumn\">\r\n                    <h1>{props.title}</h1>\r\n                </div>\r\n                <div className=\"column rightColumn\">\r\n                    <h3>{\"Poll started by \" + props.originalPosterName}</h3>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","import \"../css/AddButton.css\"\r\n\r\nexport function AddButton(props: {onClick: () => void}) {\r\n\r\n    return (\r\n        <div className=\"addButton\" onClick={props.onClick}>\r\n            <p className=\"addButtonText noselect\">Post a new message...</p>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faHeart, faHeartBroken} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport function LikeModule(props: { isLiked: boolean, likes: number, onLike: () => void, onUnlike: () => void }) {\r\n    const {isLiked, likes, onLike, onUnlike} = props;\r\n\r\n    return (\r\n        <div className=\"like-button\">\r\n            <div className=\"side-by-side\">\r\n                <p className=\"likes-text noselect\">{likes}</p>\r\n                {isLiked ? (\r\n                    <FontAwesomeIcon icon={faHeart} onClick={() => {\r\n                        if (isLiked) {\r\n                            onUnlike();\r\n                        }\r\n                    }}/>\r\n                ) : (\r\n                    <FontAwesomeIcon icon={faHeartBroken} onClick={() => {\r\n                        if (!isLiked) {\r\n                            onLike();\r\n                        }\r\n                    }}/>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, {useState} from 'react';\r\nimport {Item} from \"../model/Item\";\r\nimport {Card} from 'react-bootstrap';\r\nimport {StyleSheet, css} from \"aphrodite\";\r\nimport \"../css/App.css\"\r\nimport \"../css/LikeModule.css\"\r\nimport {LikeModule} from \"./LikeModule\";\r\nimport {UUIDContext} from './App';\r\n\r\n/**\r\n * Convert hsl to hex (adapted from https://stackoverflow.com/questions/36721830/convert-hsl-to-rgb-and-hex)\r\n * @param h hue\r\n * @param s saturation\r\n * @param l luma\r\n */\r\nfunction hslToHex(h: number, s: number, l: number) {\r\n    l /= 100;\r\n    const a = s * Math.min(l, 1 - l) / 100;\r\n    const f = (n: number) => {\r\n        const k = (n + h / 30) % 12;\r\n        const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\r\n        return Math.round(255 * color).toString(16).padStart(2, '0');   // convert to Hex and prefix \"0\" if needed\r\n    };\r\n    return `#${f(0)}${f(8)}${f(4)}`;\r\n}\r\n\r\n/**\r\n * Get the hex color from likes\r\n * @param hue The hue\r\n * @param maxLikes The maximum number of likes of any item in this room\r\n * @param thisLikes The number of likes of this item\r\n */\r\nfunction getHexColorFromLikes(hue: number, maxLikes: number, thisLikes: number): string {\r\n    let calcMaxLikes = maxLikes >= 10 ? maxLikes : 10;\r\n    if (thisLikes === 0) {\r\n        return (hslToHex(hue, 0, 95));\r\n    } else if (thisLikes <= calcMaxLikes) {\r\n        return (hslToHex(hue, thisLikes / calcMaxLikes * 53, 95 - 18 * (thisLikes / calcMaxLikes)));\r\n    } else {\r\n        return (hslToHex(hue, 53, 95 - 18));\r\n    }\r\n}\r\n\r\n/**\r\n * Create the style for the card\r\n * @param maxLikes The maximum number of likes of any item in this room\r\n * @param thisLikes The number of likes of this item\r\n */\r\nconst styles = (maxLikes: number, thisLikes: number) => {\r\n    return StyleSheet.create({\r\n        card: {\r\n            backgroundColor: getHexColorFromLikes(115, maxLikes, thisLikes),\r\n            textAlign: \"left\",\r\n            borderRadius: \"10px\",\r\n            marginTop: \"30px\",\r\n            marginRight: \"15px\",\r\n            marginLeft: \"15px\",\r\n            padding: \"20px\",\r\n            border: \"none\",\r\n        },\r\n    })\r\n}\r\n\r\nexport function Tile(props: { maxLikes: number, item: Item, onLike: (index: string) => void, onUnlike: (index: string) => void }) {\r\n    const {maxLikes, item, onLike, onUnlike} = props;\r\n    const [shouldUpdate, setShouldUpdate] = useState(false);\r\n    let uuid = React.useContext(UUIDContext);\r\n\r\n    if (shouldUpdate) {\r\n        setShouldUpdate(false);\r\n    }\r\n\r\n    return (\r\n        <Card className={css(styles(maxLikes, item.getNLikes()).card)}>\r\n            <Card.Body>{item.text}</Card.Body>\r\n            <LikeModule isLiked={item.hasAlreadyLiked(uuid)} likes={item.getNLikes()}\r\n                        onLike={() => {\r\n                            if (item.id !== null) {\r\n                                onLike(item.id);\r\n                            } else {\r\n                                alert(\"Error syncing with database. Please refresh and try again.\");\r\n                            }\r\n                            setShouldUpdate(true);\r\n                        }}\r\n                        onUnlike={() => {\r\n                            if (item.id !== null) {\r\n                                onUnlike(item.id);\r\n                            } else {\r\n                                alert(\"Error syncing with database. Please refresh and try again.\");\r\n                            }\r\n                        }\r\n                        }/>\r\n        </Card>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport {Item} from \"../model/Item\";\r\nimport \"../css/App.css\"\r\nimport \"../css/FlexGrid.css\"\r\nimport Masonry from \"react-masonry-css\"\r\nimport {Tile} from './Tile';\r\n\r\nconst breakpointColumns = {\r\n    default: 3,\r\n    1000: 2,\r\n    700: 1\r\n};\r\n\r\nexport function FlexGrid(props: { maxLikes: number, messages: Item[], onClick: (index: string) => void, onUnlike: (index: string) => void }) {\r\n\r\n    return (\r\n        <Masonry breakpointCols={breakpointColumns} className=\"grid\"\r\n                 columnClassName=\"my-masonry-grid_column\">\r\n            {props.messages.map((item) => <Tile maxLikes={props.maxLikes} key={item.id} item={item}\r\n                                                onLike={props.onClick} onUnlike={props.onUnlike}/>)}\r\n        </Masonry>\r\n\r\n    );\r\n}\r\n","import {Modal} from \"react-bootstrap\";\r\nimport \"../css/InputModal.css\"\r\nimport {useEffect, useRef} from \"react\";\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\n\r\n\r\nexport function InputModal(props: { show: boolean, onClickPositive: (name: string) => void, handleClose: () => void }) {\r\n    const {show, onClickPositive, handleClose} = props;\r\n    const textAreaAutoSize = useRef<HTMLTextAreaElement>(null);\r\n\r\n\r\n    /**\r\n     * Automatically focus on the textArea\r\n     */\r\n    useEffect(() => {\r\n        if (show && textAreaAutoSize.current !== null) {\r\n            return textAreaAutoSize.current.focus();\r\n        }\r\n    }, [show, textAreaAutoSize]);\r\n\r\n    /**\r\n     * Whether we should disable the accept button\r\n     */\r\n    function shouldDisableAcceptButton(): boolean {\r\n        if (textAreaAutoSize.current !== null) {\r\n            return textAreaAutoSize.current.value.trim().length === 0;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    return (\r\n        <Modal show={show}  onHide={handleClose} dialogClassName=\"modalsp\">\r\n            <Modal.Header>\r\n                <button type=\"button\" className=\"btn\" aria-label=\"Accept\" disabled={shouldDisableAcceptButton()} onClick={\r\n                    () => {\r\n                        if (textAreaAutoSize.current !== null) {\r\n                            onClickPositive(textAreaAutoSize.current.value);\r\n                            handleClose();\r\n                        }\r\n                    }\r\n                }>\r\n                    <i className=\"fa fa-check\" aria-hidden=\"true\"/>\r\n                </button>\r\n                <button type=\"button\" className=\"btn\" aria-label=\"Close\" disabled={shouldDisableAcceptButton()} onClick={handleClose}>\r\n                    <i className=\"fa fa-times\" aria-hidden=\"true\"/>\r\n                </button>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <TextareaAutosize ref={textAreaAutoSize} placeholder=\"Type something here...\" maxLength={750} autoFocus={true}/>\r\n            </Modal.Body>\r\n        </Modal>\r\n\r\n    );\r\n}\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/logo.cb0112e6.svg\";","import React from \"react\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport '../css/Logo.css'\r\nimport logo from \"../img/logo.svg\"\r\n\r\nexport default function() {\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <div className=\"clickable\" onClick={() => {\r\n            // set query string\r\n            let params = new URLSearchParams();\r\n            history.push({search: params.toString()});\r\n            window.location.reload();\r\n        }}>\r\n        <img className=\"logo\" src={logo} alt=\"logo\"/>\r\n        <p className=\"logo-text\">bserver</p>\r\n        </div>\r\n    );\r\n}\r\n","import React, {useEffect, useRef, useState} from \"react\";\r\nimport {Item} from \"../model/Item\";\r\nimport {DBAddItem, DBGetAll, DBUpdateItem} from \"../model/Server\";\r\nimport {Header} from \"./Header\";\r\nimport {AddButton} from \"./AddButton\";\r\nimport {FlexGrid} from \"./FlexGrid\";\r\nimport {InputModal} from \"./InputModal\";\r\nimport {UUIDContext} from \"./App\";\r\nimport {Room} from \"../model/Room\";\r\nimport Logo from \"./Logo\";\r\nimport \"../css/RoomScreen.css\";\r\nimport {Button} from \"react-bootstrap\";\r\n\r\nexport function RoomScreen(props: { room: Room }) {\r\n    const {room} = props;\r\n    const [items, setItems] = useState<Map<string, Item>>(new Map());\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [shouldUpdate, setShouldUpdate] = useState(false);\r\n    const [maxLikes, setMaxLikes] = useState(0);\r\n    const [fileDownloadUrl, setFileDownloadUrl] = useState<string>(\"\");\r\n    const dofileDownload = useRef<HTMLAnchorElement>(null);\r\n    let uuid = React.useContext(UUIDContext);\r\n\r\n    if (shouldUpdate) {\r\n        setShouldUpdate(false);\r\n        fetchFromDB();\r\n    }\r\n\r\n    /**\r\n     * Get the items from the databases\r\n     */\r\n    function fetchFromDB() {\r\n        DBGetAll(room.id).then((retItems) => {\r\n            setItems(retItems);\r\n\r\n            // get the return items and find the max likes\r\n            let values = Array.from(retItems.values());\r\n            if (values.length > 0) {\r\n                setMaxLikes(\r\n                    values\r\n                        .map(x => x.getNLikes())\r\n                        .reduce((a, b) => {\r\n                            return Math.max(a, b);\r\n                        }, 0)\r\n                );\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * On mount, fetch from DB\r\n     */\r\n    useEffect(() => {\r\n        fetchFromDB()\r\n        // Refresh every 5000 seconds\r\n        let interval = setInterval(() => {\r\n            fetchFromDB();\r\n            // console.log(\"REFRESHED\")\r\n        }, 5000)\r\n        // Cleanup refresh\r\n        return () => {clearInterval(interval)}\r\n    }, []);\r\n\r\n    /**\r\n     * When \"add item\" is pressed\r\n     */\r\n    function onAddButton() {\r\n        setShowModal(true);\r\n    }\r\n\r\n    /**\r\n     * Closing the modal\r\n     */\r\n    function closeModal() {\r\n        setShowModal(false);\r\n    }\r\n\r\n    /**\r\n     * Add an item to the database and ask to refresh\r\n     * @param name the name of the new item\r\n     */\r\n    function addItem(name: string) {\r\n        DBAddItem(room.id, name).then((newItem) => {\r\n                let newItems = items;\r\n                newItems.set(newItem.id!!, newItem);\r\n                setItems(newItems);\r\n                setShouldUpdate(true);\r\n            }\r\n        ).catch(() => {\r\n            alert(\"Sorry, item couldn't be added to the database. Please refresh and try again.\")\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Like an item with a particular id\r\n     * @param id the id of the item to like\r\n     */\r\n    function likeItem(id: string) {\r\n        let item = items.get(id);\r\n        if (item == null) {\r\n            return;\r\n        }\r\n        item.like(uuid);\r\n        // items.set(id, item);\r\n        console.log(item);\r\n        DBUpdateItem(item).then((_) => {\r\n            setShouldUpdate(true);\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Unlike an item with a particular id\r\n     * @param id the id of the item to like\r\n     */\r\n    function unlikeItem(id: string) {\r\n        let item = items.get(id);\r\n        if (item == null) {\r\n            return;\r\n        }\r\n        item.unlike(uuid);\r\n        // items.set(id, item);\r\n        console.log(item);\r\n        DBUpdateItem(item).then((_) => {\r\n            setShouldUpdate(true);\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Download to JSON\r\n     */\r\n    function download() {\r\n        const output = JSON.stringify(Array.from(items.values()).map(item => {\r\n            return {text: item.text, likes: item.getNLikes()}\r\n        }));\r\n        const blob = new Blob([output]);\r\n        const fileDownloadUrl = URL.createObjectURL(blob);\r\n        setFileDownloadUrl(fileDownloadUrl);\r\n    }\r\n\r\n    /**\r\n     * Once the download URL is set, download immediately using the doFileDownload invisible\r\n     * button\r\n     */\r\n    useEffect(() => {\r\n        if (dofileDownload.current !== null && fileDownloadUrl !== \"\") {\r\n            dofileDownload.current.click();\r\n            URL.revokeObjectURL(fileDownloadUrl);  // free up storage--no longer needed.\r\n        }\r\n        setFileDownloadUrl(\"\");\r\n    }, [fileDownloadUrl])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header logo={<Logo/>} roomPin={room.pin} title={room.name}\r\n                    originalPosterName={room.creator}/>\r\n\r\n            {room.pin !== 0 ?\r\n                <AddButton onClick={onAddButton}/>\r\n                :\r\n                <AddButton onClick={() => alert(\"Sorry, you can't post to the demo room.\")}/>\r\n            }\r\n            <Button className=\"download-button\" onClick={download} variant=\"secondary\">\r\n                EXPORT\r\n            </Button>\r\n            <a className=\"hidden\" download=\"Observer_export.txt\" href={fileDownloadUrl}\r\n               ref={dofileDownload}>Downloader</a>\r\n            {/*Reverse the items into the FlexGrid*/}\r\n            <FlexGrid maxLikes={maxLikes} messages={Array.from(items.values()).reverse()}\r\n                      onClick={likeItem} onUnlike={unlikeItem}/>\r\n            <InputModal show={showModal} onClickPositive={addItem} handleClose={closeModal}/>\r\n        </div>\r\n    );\r\n}\r\n","import '../css/NewRoom.css';\r\nimport {Button} from \"react-bootstrap\";\r\nimport React, {useRef} from \"react\";\r\n\r\nexport function NewRoom(props: { onSelect: (name: string, creator: string) => void, onCancel: () => void}) {\r\n    const roomNameInput = useRef<HTMLInputElement>(null);\r\n    const creatorNameInput = useRef<HTMLInputElement>(null);\r\n\r\n\r\n    return (\r\n        <div className=\"login-selector\">\r\n            <div className=\"login-selector-inner\">\r\n                <div className=\"container\">\r\n                    <div className=\"cancel-button-div\">\r\n                        {/*<button type=\"button\" className=\"btn cancel-button\" aria-label=\"Close\" onClick={props.onCancel}>*/}\r\n                            <i className=\"fa fa-chevron-up cancel-button\" onClick={props.onCancel} aria-hidden=\"true\"/>\r\n                        {/*</button>*/}\r\n                    </div>\r\n                    <h2>Welcome to <input ref={roomNameInput} placeholder=\"Room Name\"/></h2>\r\n                    <h3 className=\"h3-separate\">Created by <input ref={creatorNameInput} placeholder=\"Your Name\"/></h3>\r\n                </div>\r\n                <Button variant=\"success\" className=\"pin-button go-button\"\r\n                        onClick={() => {\r\n                            if (roomNameInput.current !== null\r\n                                && creatorNameInput.current !== null\r\n                                && roomNameInput.current.value.trim().length > 0\r\n                                && creatorNameInput.current.value.trim().length > 0\r\n                            ) {\r\n                                props.onSelect(roomNameInput.current.value, creatorNameInput.current.value);\r\n                            }\r\n                        }}>\r\n                    CREATE ROOM\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n\r\n}\r\n","import {Button} from \"react-bootstrap\";\r\nimport React, {useRef, useState} from \"react\";\r\nimport '../css/PinScreen.css';\r\n\r\n\r\nexport function PinScreen(props: { onSelect: (num: number, fail: () => void) => void, onNewRoom: () => void }) {\r\n    const pinInput = useRef<HTMLInputElement>(null);\r\n    const [shake, setShake] = useState(false);\r\n\r\n    function shakeButton() {\r\n        setShake(true);\r\n        setTimeout(() => setShake(false), 600);\r\n    }\r\n\r\n    function tryGoToRoom() {\r\n        if (pinInput.current != null) {\r\n            let num = parseInt(pinInput.current.value);\r\n            if (!isNaN(num)) {\r\n                props.onSelect(num, shakeButton);\r\n                return;\r\n            }\r\n        }\r\n        shakeButton();\r\n    }\r\n\r\n    return (\r\n        <div className=\"login-selector\">\r\n            <div className=\"login-selector-inner\">\r\n                <h2>Enter your room code below:</h2>\r\n                <input ref={pinInput} className=\"room-code-input\" placeholder=\"1234\"\r\n                       onKeyDown={(e) => {\r\n                           if (e.key === \"Enter\") {\r\n                               tryGoToRoom();\r\n                           }\r\n                       }\r\n                       } maxLength={10}/>\r\n                <div>\r\n                    <Button variant=\"success\" className={shake ? \"pin-button go-button shake-button\" : \"pin-button go-button\"}\r\n                            onClick={tryGoToRoom}>\r\n                        ENTER\r\n                    </Button>\r\n                </div>\r\n                <p className=\"new-room-text\">Use <b>'0'</b> to view the demo room, or start a new room</p>\r\n                <div>\r\n                    <Button className=\"pin-button\" variant=\"outline-secondary\"\r\n                            onClick={props.onNewRoom}>\r\n                        NEW ROOM\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, {useEffect, useRef} from \"react\";\r\nimport '../css/App.css'\r\nimport '../css/LoginScreen.css';\r\nimport '../css/Header.css'\r\nimport { NewRoom } from \"./NewRoom\";\r\nimport {PinScreen} from \"./PinScreen\";\r\nimport {DBAddRoom} from \"../model/Server\";\r\nimport Logo from \"./Logo\";\r\n\r\nexport function LoginScreen(props: { onSelect: (pin: number, fail: () => void) => void}) {\r\n    const first = useRef<HTMLDivElement>(null);\r\n    const second = useRef<HTMLDivElement>(null);\r\n\r\n    return (\r\n        <div className=\"login-noscroll\">\r\n            <div className=\"header-no-color\">\r\n                <div className=\"row\">\r\n                    <div className=\"column leftColumn\">\r\n                        {<Logo/>}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div ref={first} className=\"login-container\">\r\n                <PinScreen onSelect={props.onSelect} onNewRoom={() => {\r\n                    // Scroll to new room screen\r\n                    if (second.current != null) {\r\n                        second.current.scrollIntoView({behavior: \"smooth\"});\r\n                    }\r\n                }}/>\r\n            </div>\r\n            <div ref={second} className=\"login-container\">\r\n                <NewRoom onSelect={(name: string, creator: string) => {\r\n                    DBAddRoom(name, creator).then((newRoom) => {\r\n                        props.onSelect(newRoom.pin, () => {});\r\n                    });\r\n                }} onCancel={() => {\r\n                    // Scroll back to first screen\r\n                    if (first.current != null) {\r\n                        first.current.scrollIntoView({behavior: \"smooth\"});\r\n                    }\r\n                }\r\n                }/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, {useCallback, useEffect, useState} from 'react';\r\nimport '../css/App.css';\r\nimport '../css/FlexGrid.css'\r\nimport {v4 as uuidv4} from \"uuid\";\r\nimport Cookies from \"js-cookie\";\r\nimport {RoomScreen} from './RoomScreen';\r\nimport {LoginScreen} from \"./LoginScreen\";\r\nimport {DBGetRoom} from \"../model/Server\";\r\nimport {Room} from \"../model/Room\";\r\nimport {\r\n    BrowserRouter as Router,\r\n    useHistory,\r\n    useLocation\r\n} from \"react-router-dom\";\r\n\r\n/**\r\n * getQuery from location for id string\r\n */\r\nfunction useQuery() {\r\n    return new URLSearchParams(useLocation().search);\r\n}\r\n\r\n\r\nexport const UUIDContext = React.createContext(makeOrGetUUID())\r\n\r\n/**\r\n * Make or generate UUID if there isn't one in the cookies\r\n */\r\nfunction makeOrGetUUID(): string {\r\n    let str_uuid = \"uuid\";\r\n    let uuid_null = Cookies.get(str_uuid);\r\n    if (uuid_null === null || uuid_null === undefined) {\r\n        let new_uuid = uuidv4();\r\n        Cookies.set(str_uuid, new_uuid);\r\n        return new_uuid;\r\n    }\r\n    return uuid_null;\r\n}\r\n\r\nexport default function AppRouter() {\r\n    return (\r\n        <Router>\r\n            <App/>\r\n        </Router>\r\n    )\r\n}\r\n\r\nfunction App() {\r\n    const [loggedIn, setLoggedIn] = useState(false);\r\n    const [room, setRoom] = useState<Room | null>(null);\r\n    const history = useHistory();\r\n\r\n    /**\r\n     * When a room pin is selected\r\n     * @param pin the pin number of the requested room\r\n     * @param fail the function to run on failure\r\n     */\r\n    let onSelect = useCallback(function(pin: number, fail: () => void) {\r\n        DBGetRoom(pin).then((newRoom) => {\r\n            // set query string\r\n            let params = new URLSearchParams();\r\n            params.append(\"id\", String(pin));\r\n            history.push({search: params.toString()});\r\n\r\n            // set room\r\n            setRoom(newRoom);\r\n            setLoggedIn(true);\r\n        }).catch(() => {\r\n            fail();\r\n        })\r\n    }, [history]);\r\n\r\n    /**\r\n     * If there is a query string, log in\r\n     */\r\n    let queryString = useQuery().get(\"id\");\r\n    useEffect(() => {\r\n        if (queryString && !loggedIn) {\r\n            // console.log(\"room: \" + queryString)\r\n            onSelect(parseInt(queryString), () => {\r\n                // set query string\r\n                let params = new URLSearchParams();\r\n                history.push({search: params.toString()});\r\n                window.location.reload();\r\n            })\r\n        }\r\n    }, [loggedIn, queryString, history, onSelect]);\r\n\r\n    return (\r\n        <UUIDContext.Provider value={makeOrGetUUID()}>\r\n            {loggedIn && room !== null ?\r\n                <RoomScreen room={room}/>\r\n                :\r\n                <LoginScreen onSelect={onSelect}/>\r\n            }\r\n        </UUIDContext.Provider>\r\n    );\r\n}\r\n\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './ui/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}