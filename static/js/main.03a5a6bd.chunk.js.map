{"version":3,"sources":["model/Item.ts","model/Room.ts","model/Server.ts","ui/Header.tsx","ui/AddButton.tsx","ui/LikeModule.tsx","ui/Tile.tsx","ui/FlexGrid.tsx","ui/InputModal.tsx","img/logo.svg","ui/Logo.tsx","ui/RoomScreen.tsx","ui/NewRoom.tsx","ui/PinScreen.tsx","ui/LoginScreen.tsx","ui/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Item","roomId","text","id","likes","this","uuid","push","filter","val","index","arr","length","includes","Room","name","pin","creator","ip","a","items","Map","fetch","method","headers","body","JSON","stringify","response","json","then","data","i","_id","room","set","DBUpdateItem","itemToAdd","catch","Promise","reject","Header","props","className","logo","roomPin","title","originalPosterName","AddButton","onClick","LikeModule","isLiked","onLike","onUnlike","icon","faHeart","faHeartBroken","hslToHex","h","s","l","Math","min","f","n","k","color","max","round","toString","padStart","getHexColorFromLikes","hue","maxLikes","thisLikes","calcMaxLikes","styles","StyleSheet","create","card","backgroundColor","textAlign","borderRadius","marginTop","marginRight","marginLeft","padding","border","Tile","item","useState","shouldUpdate","setShouldUpdate","React","useContext","UUIDContext","Card","css","getNLikes","Body","hasAlreadyLiked","alert","breakpointColumns","default","FlexGrid","breakpointCols","columnClassName","messages","map","InputModal","show","onClickPositive","handleClose","textAreaAutoSize","useRef","shouldDisableAcceptButton","current","value","trim","useEffect","focus","Modal","onHide","dialogClassName","type","disabled","ref","placeholder","maxLength","autoFocus","Logo","history","useHistory","params","URLSearchParams","search","window","location","reload","src","alt","RoomScreen","setItems","showModal","setShowModal","setMaxLikes","fileDownloadUrl","setFileDownloadUrl","dofileDownload","fetchFromDB","useCallback","DBGetAll","retItems","values","Array","from","x","reduce","b","interval","setInterval","clearInterval","click","URL","revokeObjectURL","Button","output","blob","Blob","createObjectURL","variant","download","href","reverse","get","like","console","log","_","unlike","DBAddItem","newItem","newItems","NewRoom","roomNameInput","creatorNameInput","onCancel","onSelect","PinScreen","pinInput","shake","setShake","shakeButton","setTimeout","tryGoToRoom","num","parseInt","isNaN","onKeyDown","e","key","onNewRoom","LoginScreen","first","second","scrollIntoView","behavior","DBAddRoom","newRoom","createContext","makeOrGetUUID","str_uuid","uuid_null","Cookies","undefined","new_uuid","uuidv4","AppRouter","App","loggedIn","setLoggedIn","setRoom","fail","DBGetRoom","append","String","queryString","useLocation","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.03a5a6bd.chunk.js","sourcesContent":["export class Item {\n    roomId: string;\n    id: string;\n    likes: string[];\n    text: string;\n\n    constructor(roomId: string, text: string, id: string, likes: string[] = []) {\n        this.roomId = roomId;\n        this.id = id;\n        this.text = text;\n        this.likes = likes;\n    }\n\n\n    /**\n     * Like this item\n     * @param uuid the uuid of the liker\n     */\n    like(uuid: string) {\n        this.likes.push(uuid);\n    }\n\n    /**\n     * Unlike this item\n     * @param uuid the uuid of the unliker\n     */\n    unlike(uuid: string) {\n        this.likes = this.likes.filter(function(val, index, arr) {\n            return val !== uuid;\n        });\n    }\n\n    /**\n     * Get the number of likes this item has\n     */\n    getNLikes() {\n        return this.likes.length;\n    }\n\n    /**\n     * Check if this person has already liked this item\n     * @param uuid\n     */\n    hasAlreadyLiked(uuid: string): boolean {\n        return this.likes.includes(uuid);\n    }\n\n    toString(): String {\n        return this.text;\n    }\n\n}\n","export class Room {\n    name: string;\n    pin: number;\n    creator: string;\n    id: string;\n\n    constructor(name: string, pin: number, creator: string, id: string) {\n        this.name = name;\n        this.pin = pin;\n        this.creator = creator;\n        this.id = id;\n    }\n}\n","import {Item} from \"./Item\";\nimport {Room} from \"./Room\";\nconst ip: string = \"room.powellnz.com\";\n\n/**\n * Fetch all items from database by get requesting the server\n * @param roomId the id of the room to get all items from\n * @return items the items from the room\n */\nexport async function DBGetAll(roomId: string): Promise<Map<string, Item>> {\n    const items: Map<string, Item> = new Map();\n    const response = await fetch(`https://${ip}:9000/get-items`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ id: roomId })\n    });\n    await response.json().then(data => {\n        for (let i = 0; i < data.length; i++) {\n            const { text, _id, likes, room } = data[i];\n            items.set(_id, new Item(room, text, _id, likes))\n        }\n    });\n    return items;\n}\n\n/**\n * Add an item to the database\n * @param roomId the id of the room in which the item is from\n * @param text the text of the item\n * @return item the newly created Item object\n */\nexport async function DBAddItem(roomId: string, text: string): Promise<Item> {\n    const response = await fetch(`https://${ip}:9000/add-item`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ roomId, text })\n    });\n    let id = \"\";\n    await response.json().then(response => id = response._id);\n    return new Item(roomId, text, id);\n}\n\n/**\n * Update an item in the database\n * @param itemToAdd the item being updated\n * @return itemToAdd the item provided\n */\nexport async function DBUpdateItem(itemToAdd: Item): Promise<Item> {\n    await fetch(`https://${ip}:9000/update-item`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(itemToAdd)\n    });\n    return itemToAdd;\n}\n\n/**\n * add a room to the database\n * @param name the name of the room\n * @param creator the room's creator\n * @return room the newly created room object\n */\nexport async function DBAddRoom(name: string, creator: string): Promise<Room> {\n    const response = await fetch(`https://${ip}:9000/add-room`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ name, creator })\n    });\n    return response.json()\n        .then(data => {\n            const { name, pin, creator, _id } = data;\n            return new Room(name, pin, creator, _id);\n        });\n\n}\n\n/**\n * Gets a room from the database\n * @param pin the pin number of the room to get\n * @return the new room object if the room exists in the datbaase otherwise Promise.reject\n */\nexport async function DBGetRoom(pin: number): Promise<Room> {\n    const response = await fetch(`https://${ip}:9000/get-room`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ pin: pin })\n    });\n    return response.json()\n        .then(data => {\n            const { name, pin, creator, _id } = data;\n            return new Room(name, pin, creator, _id);\n        }).catch(() => {\n            return Promise.reject();\n        });\n}\n\n\n","import React from 'react';\nimport \"../css/App.css\"\nimport \"../css/Header.css\"\n\nexport function Header(props: { logo: JSX.Element, roomPin: number, title: String, originalPosterName: String }) {\n    return (\n        <div className=\"header\">\n            <div className=\"row\">\n                <div className=\"column leftColumn\">\n                    {props.logo}\n                    <h3 className=\"pin-text\">{\"PIN: \" + props.roomPin}</h3>\n                </div>\n                <div className=\"column middleColumn\">\n                    <h1>{props.title}</h1>\n                </div>\n                <div className=\"column rightColumn\">\n                    <h3>{\"Poll started by \" + props.originalPosterName}</h3>\n                </div>\n            </div>\n        </div>\n    );\n}\n\n\n","import \"../css/AddButton.css\"\n\nexport function AddButton(props: {onClick: () => void}) {\n\n    return (\n        <div className=\"addButton\" onClick={props.onClick}>\n            <p className=\"addButtonText noselect\">Post a new message...</p>\n        </div>\n    );\n}\n","import React from \"react\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faHeart, faHeartBroken} from \"@fortawesome/free-solid-svg-icons\";\n\nexport function LikeModule(props: { isLiked: boolean, likes: number, onLike: () => void, onUnlike: () => void }) {\n    const {isLiked, likes, onLike, onUnlike} = props;\n\n    return (\n        <div className=\"like-button\">\n            <div className=\"side-by-side\">\n                <p className=\"likes-text noselect\">{likes}</p>\n                {isLiked ? (\n                    <FontAwesomeIcon icon={faHeart} onClick={() => {\n                        if (isLiked) {\n                            onUnlike();\n                        }\n                    }}/>\n                ) : (\n                    <FontAwesomeIcon icon={faHeartBroken} onClick={() => {\n                        if (!isLiked) {\n                            onLike();\n                        }\n                    }}/>\n                )}\n            </div>\n        </div>\n    );\n}\n","import React, {useState} from 'react';\nimport {Item} from \"../model/Item\";\nimport {Card} from 'react-bootstrap';\nimport {StyleSheet, css} from \"aphrodite\";\nimport \"../css/App.css\"\nimport \"../css/LikeModule.css\"\nimport {LikeModule} from \"./LikeModule\";\nimport {UUIDContext} from './App';\n\n/**\n * Convert hsl to hex (adapted from https://stackoverflow.com/questions/36721830/convert-hsl-to-rgb-and-hex)\n * @param h hue\n * @param s saturation\n * @param l luma\n */\nfunction hslToHex(h: number, s: number, l: number) {\n    l /= 100;\n    const a = s * Math.min(l, 1 - l) / 100;\n    const f = (n: number) => {\n        const k = (n + h / 30) % 12;\n        const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n        return Math.round(255 * color).toString(16).padStart(2, '0');   // convert to Hex and prefix \"0\" if needed\n    };\n    return `#${f(0)}${f(8)}${f(4)}`;\n}\n\n/**\n * Get the hex color from likes\n * @param hue The hue\n * @param maxLikes The maximum number of likes of any item in this room\n * @param thisLikes The number of likes of this item\n */\nfunction getHexColorFromLikes(hue: number, maxLikes: number, thisLikes: number): string {\n    let calcMaxLikes = maxLikes >= 10 ? maxLikes : 10;\n    if (thisLikes === 0) {\n        return (hslToHex(hue, 0, 95));\n    } else if (thisLikes <= calcMaxLikes) {\n        return (hslToHex(hue, thisLikes / calcMaxLikes * 53, 95 - 18 * (thisLikes / calcMaxLikes)));\n    } else {\n        return (hslToHex(hue, 53, 95 - 18));\n    }\n}\n\n/**\n * Create the style for the card\n * @param maxLikes The maximum number of likes of any item in this room\n * @param thisLikes The number of likes of this item\n */\nconst styles = (maxLikes: number, thisLikes: number) => {\n    return StyleSheet.create({\n        card: {\n            backgroundColor: getHexColorFromLikes(115, maxLikes, thisLikes),\n            textAlign: \"left\",\n            borderRadius: \"10px\",\n            marginTop: \"30px\",\n            marginRight: \"15px\",\n            marginLeft: \"15px\",\n            padding: \"20px\",\n            border: \"none\",\n        },\n    })\n}\n\nexport function Tile(props: { maxLikes: number, item: Item, onLike: (index: string) => void, onUnlike: (index: string) => void }) {\n    const {maxLikes, item, onLike, onUnlike} = props;\n    const [shouldUpdate, setShouldUpdate] = useState(false);\n    let uuid = React.useContext(UUIDContext);\n\n    if (shouldUpdate) {\n        setShouldUpdate(false);\n    }\n\n    return (\n        <Card className={css(styles(maxLikes, item.getNLikes()).card)}>\n            <Card.Body>{item.text}</Card.Body>\n            <LikeModule isLiked={item.hasAlreadyLiked(uuid)} likes={item.getNLikes()}\n                        onLike={() => {\n                            if (item.id !== null) {\n                                onLike(item.id);\n                            } else {\n                                alert(\"Error syncing with database. Please refresh and try again.\");\n                            }\n                            setShouldUpdate(true);\n                        }}\n                        onUnlike={() => {\n                            if (item.id !== null) {\n                                onUnlike(item.id);\n                            } else {\n                                alert(\"Error syncing with database. Please refresh and try again.\");\n                            }\n                        }\n                        }/>\n        </Card>\n    );\n}\n","import React from 'react';\nimport {Item} from \"../model/Item\";\nimport \"../css/App.css\"\nimport \"../css/FlexGrid.css\"\nimport Masonry from \"react-masonry-css\"\nimport {Tile} from './Tile';\n\nconst breakpointColumns = {\n    default: 3,\n    1000: 2,\n    700: 1\n};\n\nexport function FlexGrid(props: { maxLikes: number, messages: Item[], onClick: (index: string) => void, onUnlike: (index: string) => void }) {\n\n    return (\n        <Masonry breakpointCols={breakpointColumns} className=\"grid\"\n                 columnClassName=\"my-masonry-grid_column\">\n            {props.messages.map((item) => <Tile maxLikes={props.maxLikes} key={item.id} item={item}\n                                                onLike={props.onClick} onUnlike={props.onUnlike}/>)}\n        </Masonry>\n\n    );\n}\n","import {Modal} from \"react-bootstrap\";\nimport \"../css/InputModal.css\"\nimport {useEffect, useRef} from \"react\";\nimport TextareaAutosize from 'react-textarea-autosize';\n\n\nexport function InputModal(props: { show: boolean, onClickPositive: (name: string) => void, handleClose: () => void }) {\n    const {show, onClickPositive, handleClose} = props;\n    const textAreaAutoSize = useRef<HTMLTextAreaElement>(null);\n\n\n    /**\n     * Automatically focus on the textArea\n     */\n    useEffect(() => {\n        if (show && textAreaAutoSize.current !== null) {\n            return textAreaAutoSize.current.focus();\n        }\n    }, [show, textAreaAutoSize]);\n\n    /**\n     * Whether we should disable the accept button\n     */\n    function shouldDisableAcceptButton(): boolean {\n        if (textAreaAutoSize.current !== null) {\n            return textAreaAutoSize.current.value.trim().length === 0;\n        }\n        return false;\n    }\n\n    return (\n        <Modal show={show}  onHide={handleClose} dialogClassName=\"modalsp\">\n            <Modal.Header>\n                <button type=\"button\" className=\"btn\" aria-label=\"Accept\" disabled={shouldDisableAcceptButton()} onClick={\n                    () => {\n                        if (textAreaAutoSize.current !== null) {\n                            onClickPositive(textAreaAutoSize.current.value);\n                            handleClose();\n                        }\n                    }\n                }>\n                    <i className=\"fa fa-check\" aria-hidden=\"true\"/>\n                </button>\n                <button type=\"button\" className=\"btn\" aria-label=\"Close\" disabled={shouldDisableAcceptButton()} onClick={handleClose}>\n                    <i className=\"fa fa-times\" aria-hidden=\"true\"/>\n                </button>\n            </Modal.Header>\n            <Modal.Body>\n                <TextareaAutosize ref={textAreaAutoSize} placeholder=\"Type something here...\" maxLength={750} autoFocus={true}/>\n            </Modal.Body>\n        </Modal>\n\n    );\n}\n\n\n","export default __webpack_public_path__ + \"static/media/logo.f4b7df85.svg\";","import React from \"react\";\nimport {useHistory} from \"react-router-dom\";\nimport '../css/Logo.css'\nimport logo from \"../img/logo.svg\"\n\nexport default function Logo() {\n    const history = useHistory();\n\n    return (\n        <div className=\"clickable\" onClick={() => {\n            // set query string\n            let params = new URLSearchParams();\n            history.push({search: params.toString()});\n            window.location.reload();\n        }}>\n        <img className=\"logo\" src={logo} alt=\"logo\"/>\n        <p className=\"logo-text\">bserver</p>\n        </div>\n    );\n}\n","import React, {useCallback, useEffect, useRef, useState} from \"react\";\nimport {Item} from \"../model/Item\";\nimport {DBAddItem, DBGetAll, DBUpdateItem} from \"../model/Server\";\nimport {Header} from \"./Header\";\nimport {AddButton} from \"./AddButton\";\nimport {FlexGrid} from \"./FlexGrid\";\nimport {InputModal} from \"./InputModal\";\nimport {UUIDContext} from \"./App\";\nimport {Room} from \"../model/Room\";\nimport Logo from \"./Logo\";\nimport \"../css/RoomScreen.css\";\nimport {Button} from \"react-bootstrap\";\n\nexport function RoomScreen(props: { room: Room }) {\n    const {room} = props;\n    const [items, setItems] = useState<Map<string, Item>>(new Map());\n    const [showModal, setShowModal] = useState(false);\n    const [shouldUpdate, setShouldUpdate] = useState(false);\n    const [maxLikes, setMaxLikes] = useState(0);\n    const [fileDownloadUrl, setFileDownloadUrl] = useState<string>(\"\");\n    const dofileDownload = useRef<HTMLAnchorElement>(null);\n    let uuid = React.useContext(UUIDContext);\n\n    /**\n     * Get the items from the databases\n     */\n    const fetchFromDB = useCallback(\n        () => {\n            DBGetAll(room.id).then((retItems) => {\n                setItems(retItems);\n\n                // get the return items and find the max likes\n                let values = Array.from(retItems.values());\n                if (values.length > 0) {\n                    setMaxLikes(\n                        values\n                            .map(x => x.getNLikes())\n                            .reduce((a, b) => {\n                                return Math.max(a, b);\n                            }, 0)\n                    );\n                }\n            });\n        },\n        [room.id],\n    );\n\n    if (shouldUpdate) {\n        setShouldUpdate(false);\n        fetchFromDB();\n    }\n\n    /**\n     * On mount, fetch from DB\n     */\n    useEffect(() => {\n        fetchFromDB();\n        // Refresh every 5000 seconds\n        let interval = setInterval(() => {\n            fetchFromDB();\n            // console.log(\"REFRESHED\")\n        }, 5000)\n        // Cleanup refresh\n        return () => {clearInterval(interval)}\n    }, [fetchFromDB]);\n\n    /**\n     * When \"add item\" is pressed\n     */\n    function onAddButton() {\n        setShowModal(true);\n    }\n\n    /**\n     * Closing the modal\n     */\n    function closeModal() {\n        setShowModal(false);\n    }\n\n    /**\n     * Add an item to the database and ask to refresh\n     * @param name the name of the new item\n     */\n    function addItem(name: string) {\n        DBAddItem(room.id, name).then((newItem) => {\n                let newItems = items;\n                newItems.set(newItem.id!!, newItem);\n                setItems(newItems);\n                setShouldUpdate(true);\n            }\n        ).catch(() => {\n            alert(\"Sorry, item couldn't be added to the database. Please refresh and try again.\")\n        })\n    }\n\n    /**\n     * Like an item with a particular id\n     * @param id the id of the item to like\n     */\n    function likeItem(id: string) {\n        let item = items.get(id);\n        if (item == null) {\n            return;\n        }\n        item.like(uuid);\n        // items.set(id, item);\n        console.log(item);\n        DBUpdateItem(item).then((_) => {\n            setShouldUpdate(true);\n        })\n    }\n\n    /**\n     * Unlike an item with a particular id\n     * @param id the id of the item to like\n     */\n    function unlikeItem(id: string) {\n        let item = items.get(id);\n        if (item == null) {\n            return;\n        }\n        item.unlike(uuid);\n        // items.set(id, item);\n        console.log(item);\n        DBUpdateItem(item).then((_) => {\n            setShouldUpdate(true);\n        })\n    }\n\n    /**\n     * Download to JSON\n     */\n    function download() {\n        const output = JSON.stringify(Array.from(items.values()).map(item => {\n            return {text: item.text, likes: item.getNLikes()}\n        }));\n        const blob = new Blob([output]);\n        const fileDownloadUrl = URL.createObjectURL(blob);\n        setFileDownloadUrl(fileDownloadUrl);\n    }\n\n    /**\n     * Once the download URL is set, download immediately using the doFileDownload invisible\n     * button\n     */\n    useEffect(() => {\n        if (dofileDownload.current !== null && fileDownloadUrl !== \"\") {\n            dofileDownload.current.click();\n            URL.revokeObjectURL(fileDownloadUrl);  // free up storage--no longer needed.\n        }\n        setFileDownloadUrl(\"\");\n    }, [fileDownloadUrl])\n\n    return (\n        <div className=\"App\">\n            <Header logo={<Logo/>} roomPin={room.pin} title={room.name}\n                    originalPosterName={room.creator}/>\n\n            {room.pin !== 0 ?\n                <AddButton onClick={onAddButton}/>\n                :\n                <AddButton onClick={() => alert(\"Sorry, you can't post to the demo room.\")}/>\n            }\n            <Button className=\"download-button\" onClick={download} variant=\"secondary\">\n                EXPORT\n            </Button>\n            <a className=\"hidden\" download=\"Observer_export.txt\" href={fileDownloadUrl}\n               ref={dofileDownload}>Downloader</a>\n            {/*Reverse the items into the FlexGrid*/}\n            <FlexGrid maxLikes={maxLikes} messages={Array.from(items.values()).reverse()}\n                      onClick={likeItem} onUnlike={unlikeItem}/>\n            <InputModal show={showModal} onClickPositive={addItem} handleClose={closeModal}/>\n        </div>\n    );\n}\n","import '../css/NewRoom.css';\nimport {Button} from \"react-bootstrap\";\nimport React, {useRef} from \"react\";\n\nexport function NewRoom(props: { onSelect: (name: string, creator: string) => void, onCancel: () => void}) {\n    const roomNameInput = useRef<HTMLInputElement>(null);\n    const creatorNameInput = useRef<HTMLInputElement>(null);\n\n\n    return (\n        <div className=\"login-selector\">\n            <div className=\"login-selector-inner\">\n                <div className=\"container\">\n                    <div className=\"cancel-button-div\">\n                        {/*<button type=\"button\" className=\"btn cancel-button\" aria-label=\"Close\" onClick={props.onCancel}>*/}\n                            <i className=\"fa fa-chevron-up cancel-button\" onClick={props.onCancel} aria-hidden=\"true\"/>\n                        {/*</button>*/}\n                    </div>\n                    <h2>Welcome to <input ref={roomNameInput} placeholder=\"Room Name\"/></h2>\n                    <h3 className=\"h3-separate\">Created by <input ref={creatorNameInput} placeholder=\"Your Name\"/></h3>\n                </div>\n                <Button variant=\"success\" className=\"pin-button go-button\"\n                        onClick={() => {\n                            if (roomNameInput.current !== null\n                                && creatorNameInput.current !== null\n                                && roomNameInput.current.value.trim().length > 0\n                                && creatorNameInput.current.value.trim().length > 0\n                            ) {\n                                props.onSelect(roomNameInput.current.value, creatorNameInput.current.value);\n                            }\n                        }}>\n                    CREATE ROOM\n                </Button>\n            </div>\n        </div>\n    );\n\n\n}\n","import {Button} from \"react-bootstrap\";\nimport React, {useRef, useState} from \"react\";\nimport '../css/PinScreen.css';\n\n\nexport function PinScreen(props: { onSelect: (num: number, fail: () => void) => void, onNewRoom: () => void }) {\n    const pinInput = useRef<HTMLInputElement>(null);\n    const [shake, setShake] = useState(false);\n\n    function shakeButton() {\n        setShake(true);\n        setTimeout(() => setShake(false), 600);\n    }\n\n    function tryGoToRoom() {\n        if (pinInput.current != null) {\n            let num = parseInt(pinInput.current.value);\n            if (!isNaN(num)) {\n                props.onSelect(num, shakeButton);\n                return;\n            }\n        }\n        shakeButton();\n    }\n\n    return (\n        <div className=\"login-selector\">\n            <div className=\"login-selector-inner\">\n                <h2>Enter your room code below:</h2>\n                <input ref={pinInput} className=\"room-code-input\" placeholder=\"1234\"\n                       onKeyDown={(e) => {\n                           if (e.key === \"Enter\") {\n                               tryGoToRoom();\n                           }\n                       }\n                       } maxLength={10}/>\n                <div>\n                    <Button variant=\"success\" className={shake ? \"pin-button go-button shake-button\" : \"pin-button go-button\"}\n                            onClick={tryGoToRoom}>\n                        ENTER\n                    </Button>\n                </div>\n                <p className=\"new-room-text\">Use <b>'0'</b> to view the demo room, or start a new room</p>\n                <div>\n                    <Button className=\"pin-button\" variant=\"outline-secondary\"\n                            onClick={props.onNewRoom}>\n                        NEW ROOM\n                    </Button>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React, {useRef} from \"react\";\nimport '../css/App.css'\nimport '../css/LoginScreen.css';\nimport '../css/Header.css'\nimport { NewRoom } from \"./NewRoom\";\nimport {PinScreen} from \"./PinScreen\";\nimport {DBAddRoom} from \"../model/Server\";\nimport Logo from \"./Logo\";\n\nexport function LoginScreen(props: { onSelect: (pin: number, fail: () => void) => void}) {\n    const first = useRef<HTMLDivElement>(null);\n    const second = useRef<HTMLDivElement>(null);\n\n    return (\n        <div className=\"login-noscroll\">\n            <div className=\"header-no-color\">\n                <div className=\"row\">\n                    <div className=\"column leftColumn\">\n                        {<Logo/>}\n                    </div>\n                </div>\n            </div>\n            <div ref={first} className=\"login-container\">\n                <PinScreen onSelect={props.onSelect} onNewRoom={() => {\n                    // Scroll to new room screen\n                    if (second.current != null) {\n                        second.current.scrollIntoView({behavior: \"smooth\"});\n                    }\n                }}/>\n            </div>\n            <div ref={second} className=\"login-container\">\n                <NewRoom onSelect={(name: string, creator: string) => {\n                    DBAddRoom(name, creator).then((newRoom) => {\n                        props.onSelect(newRoom.pin, () => {});\n                    });\n                }} onCancel={() => {\n                    // Scroll back to first screen\n                    if (first.current != null) {\n                        first.current.scrollIntoView({behavior: \"smooth\"});\n                    }\n                }\n                }/>\n            </div>\n        </div>\n    );\n}\n","import React, {useCallback, useEffect, useState} from 'react';\nimport '../css/App.css';\nimport '../css/FlexGrid.css'\nimport {v4 as uuidv4} from \"uuid\";\nimport Cookies from \"js-cookie\";\nimport {RoomScreen} from './RoomScreen';\nimport {LoginScreen} from \"./LoginScreen\";\nimport {DBGetRoom} from \"../model/Server\";\nimport {Room} from \"../model/Room\";\nimport {\n    BrowserRouter as Router,\n    useHistory,\n    useLocation\n} from \"react-router-dom\";\n\n/**\n * getQuery from location for id string\n */\nfunction useQuery() {\n    return new URLSearchParams(useLocation().search);\n}\n\n\nexport const UUIDContext = React.createContext(makeOrGetUUID())\n\n/**\n * Make or generate UUID if there isn't one in the cookies\n */\nfunction makeOrGetUUID(): string {\n    let str_uuid = \"uuid\";\n    let uuid_null = Cookies.get(str_uuid);\n    if (uuid_null === null || uuid_null === undefined) {\n        let new_uuid = uuidv4();\n        Cookies.set(str_uuid, new_uuid);\n        return new_uuid;\n    }\n    return uuid_null;\n}\n\nexport default function AppRouter() {\n    return (\n        <Router>\n            <App/>\n        </Router>\n    )\n}\n\nfunction App() {\n    const [loggedIn, setLoggedIn] = useState(false);\n    const [room, setRoom] = useState<Room | null>(null);\n    const history = useHistory();\n\n    /**\n     * When a room pin is selected\n     * @param pin the pin number of the requested room\n     * @param fail the function to run on failure\n     */\n    let onSelect = useCallback(function(pin: number, fail: () => void) {\n        DBGetRoom(pin).then((newRoom) => {\n            // set query string\n            let params = new URLSearchParams();\n            params.append(\"id\", String(pin));\n            history.push({search: params.toString()});\n\n            // set room\n            setRoom(newRoom);\n            setLoggedIn(true);\n        }).catch(() => {\n            fail();\n        })\n    }, [history]);\n\n    /**\n     * If there is a query string, log in\n     */\n    let queryString = useQuery().get(\"id\");\n    useEffect(() => {\n        if (queryString && !loggedIn) {\n            // console.log(\"room: \" + queryString)\n            onSelect(parseInt(queryString), () => {\n                // set query string\n                let params = new URLSearchParams();\n                history.push({search: params.toString()});\n                window.location.reload();\n            })\n        }\n    }, [loggedIn, queryString, history, onSelect]);\n\n    return (\n        <UUIDContext.Provider value={makeOrGetUUID()}>\n            {loggedIn && room !== null ?\n                <RoomScreen room={room}/>\n                :\n                <LoginScreen onSelect={onSelect}/>\n            }\n        </UUIDContext.Provider>\n    );\n}\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './ui/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}